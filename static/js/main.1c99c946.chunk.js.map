{"version":3,"sources":["logo.svg","components/Wrapper.js","components/Header.js","components/Content.js","components/WeatherSearch.js","components/weatherData.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Wrapper","props","className","children","Header","Content","WeatherSearch","onSubmit","api_call","name","autoComplete","type","Weatherdata","weather","city","temp","humidity","pressure","Main","useState","setWeather","setCity","e","a","preventDefault","location","target","elements","value","url","request","axios","get","response","data","main","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,iGCe5BC,G,kBAbC,SAACC,GAGjB,OAEE,yBAAKC,UAAU,WACTD,EAAME,Y,gDCICC,EAVA,kBAEd,6BACI,iDCOUC,EAVC,SAACJ,GACjB,OACC,6BACKA,EAAME,WCaGG,EAhBO,SAACL,GACvB,OACI,yBAAKC,UAAU,kBACf,0BAAMA,UAAU,uBAAuBK,SAAUN,EAAMO,UACrD,2BAAOC,KAAK,WAAWC,aAAa,MAAMR,UAAU,wBAAwBS,KAAK,SACjF,yBAAKT,UAAU,0BACb,4BAAQA,UAAU,0BAAlB,cCsBOU,EA5BK,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,QAAQC,EAAU,EAAVA,KACvBC,EAA6BF,EAA7BE,KAAOC,EAAsBH,EAAtBG,SAAWC,EAAWJ,EAAXI,SAEzB,OACA,6BACA,mDAAyB,8BAAQH,IAC/B,6BACE,8BACE,0CACA,2BAAKC,IAEP,8BACE,uCACA,2BAAKC,IAEP,8BACE,uCACA,2BAAKC,OCuBIC,EAjCF,WACZ,IAAD,EAC+BC,qBAD/B,mBACSN,EADT,KACiBO,EADjB,OAEwBD,qBAFxB,mBAESL,EAFT,KAEcO,EAFd,KAIQb,EAAQ,uCAAG,WAAMc,GAAN,qBAAAC,EAAA,6DAEfD,EAAEE,iBAEIC,EAAUH,EAAEI,OAAOC,SAASF,SAASG,MAE3B,mCACVC,EAPS,4DAOkDJ,EAPlD,kBAMC,oCAEVK,EAAQC,IAAMC,IAAIH,GART,SASQC,EATR,OASTG,EATS,OAUfb,EAAWa,EAASC,KAAKC,MACzBd,EAAQY,EAASC,KAAKzB,MAXP,4CAAH,sDAchB,OACI,yBAAKP,UAAU,QACX,kBAAE,EAAF,MACA,kBAAC,EAAD,KAEI,kBAAC,EAAD,CAAeM,SAAUA,IAEtBK,GAAW,kBAAC,EAAD,CAAcA,QAAUA,EAASC,KAAMA,OCnBlDsB,MAXf,WACE,OAEE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOb,SAASc,UAEe,UAA7BD,OAAOb,SAASc,UAEhBD,OAAOb,SAASc,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1c99c946.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nconst Wrapper = (props) =>\r\n{\r\n\r\nreturn(\r\n\r\n  <div className=\"wrapper\">\r\n      { props.children }\r\n      </div>\r\n\r\n\r\n);\r\n\r\n}\r\nexport default Wrapper;","import React from 'react'\r\n\r\nconst Header = () => (\r\n\r\n <div>\r\n     <h1>Forecast finder</h1>\r\n     </div>\r\n\r\n)\r\n\r\n\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nconst Content = (props) => {\r\nreturn(\r\n <div>\r\n     {props.children}\r\n     </div>\r\n)\r\n}\r\n\r\n\r\n\r\nexport default Content;","import React from 'react'\r\n\r\nconst WeatherSearch = (props) => {\r\nreturn(\r\n    <div className=\"weather-search\">\r\n    <form className=\"weather-search__form\" onSubmit={props.api_call}>\r\n      <input name=\"location\" autoComplete=\"off\" className=\"weather-search__input\" type=\"text\"/>\r\n      <div className=\"weather-search__submit\">\r\n        <button className=\"weather-search__button\">&rarr;</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n\r\n)\r\n}\r\n\r\n\r\n\r\nexport default WeatherSearch;","import React from 'react'\r\n\r\nconst Weatherdata = ({weather,city}) => {\r\nconst {temp , humidity , pressure }=weather\r\n\r\nreturn(\r\n<div >\r\n<p >Weather forecast for <span >{city}</span></p>\r\n  <div >\r\n    <span >\r\n      <p >Temperature</p>\r\n      <p >{temp}</p>\r\n    </span>\r\n    <span>\r\n      <p >Humidity</p>\r\n      <p >{humidity}</p>\r\n    </span>\r\n    <span >\r\n      <p >Pressure</p>\r\n      <p >{pressure}</p>\r\n    </span>\r\n  </div>\r\n</div>\r\n\r\n )\r\n\r\n}\r\n\r\n\r\n\r\nexport default Weatherdata;","import React ,{useState} from 'react'\r\nimport axios from 'axios'\r\nimport Header from \"./Header\"\r\nimport Content from './Content'\r\nimport WeatherSearch from './WeatherSearch'\r\nimport Weatherdata  from './weatherData'\r\n\r\n\r\n\r\nconst Main = () =>\r\n{\r\n  const [weather,setWeather]  =useState()\r\n  const [city,setCity]= useState()\r\n\r\n  const api_call = async e =>\r\n  {\r\n    e.preventDefault();\r\n\r\n    const location =e.target.elements.location.value\r\n\r\n    const API_KEY = \"bf147039776a8d23213dbb61206cef8c\";\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${API_KEY}`;\r\n    const request=axios.get(url)\r\n    const response = await request\r\n    setWeather(response.data.main)\r\n    setCity(response.data.name)\r\n  }\r\n\r\nreturn(\r\n    <div className=\"Main\">\r\n        < Header />\r\n        <Content>\r\n    \r\n            <WeatherSearch api_call={api_call} />\r\n            \r\n             { weather && <Weatherdata  weather ={weather} city={city}/> }\r\n         \r\n            </Content>\r\n    </div>  \r\n);\r\n\r\n}\r\nexport default Main;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Wrapper from './components/Wrapper'\nimport Main from './components/Main'\nfunction App() {\n  return (\n    \n    <Wrapper>\n      <Main />\n      </Wrapper>\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}